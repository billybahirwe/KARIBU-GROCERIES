doctype html
html
  head
    meta(charset='UTF-8')
    meta(name='viewport', content='width=device-width, initial-scale=1.0')
    title Credit Sale Registration
    link(rel='stylesheet', href='/css/creditSale.css')
    link(rel='stylesheet', href='https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css')
  body
    nav.navbar.navbar-expand-lg.navbar-dark.bg-dark.px-4.mb-4
      a.navbar-brand(href='/sales/agent/home') Karibu Groceries
      ul.navbar-nav.ms-auto
        li.nav-item
          a.nav-link(href='/sales/agent/home') Home
        li.nav-item
          a.nav-link(href='/sales/new') Register Sale
        li.nav-item
          a.nav-link(href='/sales/credit') Register Credit Sale
        li.nav-item
          a.nav-link(href='/logout') Logout

    main.container.mt-4
      h2.mb-4.text-center Credit Sale Registration Form

      form(action='/sales/credit', method='POST', class='needs-validation', novalidate)
        .mb-3
          label.form-label(for='buyerName') Buyer's Name
          input#buyerName.form-control(type='text', name='buyerName', required, minlength='2', pattern='^[a-zA-Z0-9 ]+$')
          div.invalid-feedback Please enter a valid name (at least 2 characters, alphanumeric).

        .mb-3
          label.form-label(for='nin') National ID (NIN)
          input#nin.form-control(type='text', name='nin', pattern='^CF[A-Z0-9]{12}$')
          div.form-text Format: CF followed by 12 uppercase letters or digits (e.g. CF123456789012)

        .mb-3
          label.form-label(for='location') Location
          input#location.form-control(type='text', name='location', required, minlength='2', pattern='^[a-zA-Z0-9 ]+$')
          div.invalid-feedback Please enter a valid location (at least 2 characters).

        .mb-3
          label.form-label(for='contact') Contact Number
          input#contact.form-control(type='tel', name='contact', required, pattern='^\\+\\d{7,15}$', placeholder='+256...')
          div.invalid-feedback Must be a valid international number starting with "+" and 7â€“15 digits.

        .mb-3
          label.form-label(for='amountDue') Amount Due (UGX)
          input#amountDue.form-control(type='number', name='amountDue', required, min='10000')
          div.invalid-feedback Amount must be at least 10,000 UGX.

        .mb-3
          label.form-label(for='salesAgent') Sales Agent Name
          input#salesAgent.form-control(type='text', name='salesAgent', required, minlength='2', pattern='^[a-zA-Z0-9 ]+$')
          div.invalid-feedback Please enter a valid sales agent name.

        .mb-3
          label.form-label(for='dueDate') Due Date
          input#dueDate.form-control(type='date', name='dueDate', required)

        .mb-3
          label.form-label(for='produceName') Produce Name
          input#produceName.form-control(type='text', name='produceName', required, minlength='2', pattern='^[a-zA-Z0-9 ]+$')
          div.invalid-feedback Please enter a valid produce name (at least 2 characters).

        .mb-3
          label.form-label(for='produceType') Produce Type
          input#produceType.form-control(type='text', name='produceType', required)
          div.invalid-feedback Produce type is required.

        .mb-3
          label.form-label(for='tonnage') Tonnage (kgs)
          input#tonnage.form-control(type='number', name='tonnage', required, min='0')
          div.invalid-feedback Please enter a valid tonnage (0 or more).

        .mb-3
          label.form-label(for='dispatchDate') Date of Dispatch
          input#dispatchDate.form-control(type='date', name='dispatchDate', required)
          div.invalid-feedback Please select a dispatch date.

        // Option 1: Show branch as read-only
        //- .mb-3
        //-   label.form-label(for='branch') Branch
        //-   input#branch.form-control(type='text', name='branch', value=branch readonly)

        // Option 2: Hidden input (uncomment this and remove Option 1 if preferred)
        // input(type='hidden', name='branch', value=branch)

        button.btn.btn-primary(type='submit') Submit Credit Sale

    script.
      (() => {
        'use strict';
        const forms = document.querySelectorAll('.needs-validation');
        Array.from(forms).forEach(form => {
          form.addEventListener('submit', event => {
            if (!form.checkValidity()) {
              event.preventDefault();
              event.stopPropagation();
            }
            form.classList.add('was-validated');
          }, false);
        });
      })();
